
#include <Trade\Trade.mqh>

input int      FastMAPeriod      = 20;      //Fast EMA period
input int      SlowMAPeriod      = 50;      //Slow EMA period
input int      RSI_Period        = 14;      //RSI period
input double   RSI_Threshold     = 50.0;    //RSI threshold filter
input int      ATR_Period        = 14;      //ATR period for stop calculation
input double   ATR_Multiplier    = 1.5;     //ATR multiplier for SL
input double   RewardRiskRatio   = 2.0;     //TP = RRR * SL
input double   RiskPercent       = 1.0;     //% equity risk per trade

CTrade trade;

int FastMAHandle;
int SlowMAHandle;
int RSIHandle;
int ATRHandle;


int OnInit()
  {
   FastMAHandle = iMA(_Symbol, _Period, FastMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
   SlowMAHandle = iMA(_Symbol, _Period, SlowMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
   RSIHandle     = iRSI(_Symbol, _Period, RSI_Period, PRICE_CLOSE);
   ATRHandle     = iATR(_Symbol, _Period, ATR_Period);

   if(FastMAHandle<0 || SlowMAHandle<0 || RSIHandle<0 || ATRHandle<0)
     {
      Print("Failed to create indicator handles");
      return(INIT_FAILED);
     }
   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization                                         |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   IndicatorRelease(FastMAHandle);
   IndicatorRelease(SlowMAHandle);
   IndicatorRelease(RSIHandle);
   IndicatorRelease(ATRHandle);
  }

//+------------------------------------------------------------------+
//| Expert tick function                                            |
//+------------------------------------------------------------------+
void OnTick()
  {
   // Only one position at a time
   if(PositionSelect(_Symbol))
      return;

   // Buffers for indicator values
   double fastMA[2], slowMA[2];
   if(CopyBuffer(FastMAHandle,0,0,2,fastMA)!=2 || CopyBuffer(SlowMAHandle,0,0,2,slowMA)!=2)
      return;

   double rsiArr[1];
   if(CopyBuffer(RSIHandle,0,0,1,rsiArr)!=1)
      return;
   double rsi = rsiArr[0];

   double atrArr[1];
   if(CopyBuffer(ATRHandle,0,0,1,atrArr)!=1)
      return;
   double atr = atrArr[0];

   // Detect EMA crossover with RSI filter
   bool bullishCross = (fastMA[1] <= slowMA[1] && fastMA[0] > slowMA[0] && rsi > RSI_Threshold);
   bool bearishCross = (fastMA[1] >= slowMA[1] && fastMA[0] < slowMA[0] && rsi < RSI_Threshold);

   if(!bullishCross && !bearishCross)
      return;

   // Calculate lot size based on risk percent and ATR-based SL
   double equity      = AccountInfoDouble(ACCOUNT_EQUITY);
   double riskAmount  = equity * (RiskPercent/100.0);
   double slPoints    = atr * ATR_Multiplier / _Point;
   double tickValue   = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
   double tickSize    = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);
   double lot         = NormalizeDouble(riskAmount / (slPoints * tickValue / tickSize), 2);

   // Ensure lot size within broker limits
   double minLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
   double maxLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MAX);
   double lotStep= SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
   lot = MathMax(minLot, MathMin(lot, maxLot));
   lot = NormalizeDouble(MathFloor(lot/lotStep)*lotStep, 2);
   if(lot < minLot)
      return;

   // Entry price, SL and TP
   double price = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double sl, tp;
   if(bullishCross)
     {
      sl = price - atr * ATR_Multiplier;
      tp = price + atr * ATR_Multiplier * RewardRiskRatio;
      trade.Buy(lot, _Symbol, 0, sl, tp);
     }
   else if(bearishCross)
     {
      price = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
      sl    = price + atr * ATR_Multiplier;
      tp    = price - atr * ATR_Multiplier * RewardRiskRatio;
      trade.Sell(lot, _Symbol, 0, sl, tp);
     }
  }
//+------------------------------------------------------------------+
